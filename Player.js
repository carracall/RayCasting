// Generated by CoffeeScript 1.10.0
(function() {
  var Camera, Player;

  Camera = (function() {
    function Camera(pos, theta1, ctx1, walls1, width1, height1, pixWidth1, scrHeight, scrWidth, scrDist) {
      this.pos = pos;
      this.theta = theta1;
      this.ctx = ctx1;
      this.walls = walls1;
      this.width = width1;
      this.height = height1;
      this.pixWidth = pixWidth1;
      this.scrHeight = scrHeight;
      this.scrWidth = scrWidth;
      this.scrDist = scrDist;
      this.xres = Math.floor(this.width / this.pixWidth);
      this.pxlWidth = this.scrWidth / this.xres;
      this.xres = 640;
      this.width = 640;
      this.height = 480;
      this.e_r = new Vector(Math.cos(this.theta), Math.sin(this.theta));
    }

    Camera.prototype._adjust = function() {
      if (this.theta > Math.PI) {
        return this.theta -= 2 * Math.PI;
      } else if (this.theta < -Math.PI) {
        return this.theta += 2 * Math.PI;
      }
    };

    Camera.prototype.drawWalls = function() {
      var _h, brightness, closestWall, e_theta, i, j, n, p, pxlLat, r, ref, ref1, results;
      this._adjust();
      this.pxlWidth = this.scrWidth / this.xres;
      console.log("@scrWidth: ", this.scrWidth);
      this.e_r.set(Math.cos(this.theta), Math.sin(this.theta));
      console.log("@e_r", this.e_r);
      e_theta = this.e_r.clone().rot90();
      console.log("e_theta", e_theta);
      pxlLat = e_theta.clone().mult(-this.pxlWidth);
      console.log("scrWidth?: ", pxlLat.clone().mult(this.xres));
      r = this.e_r.clone().mult(this.scrDist).add(e_theta.clone().mult(this.scrWidth / 2));
      console.log("test: ", this.e_r.clone());
      console.log("@scrDist", this.scrDist);
      results = [];
      for (i = j = 1, ref = this.xres; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {
        console.log("r", r);
        ref1 = this._getIntersection(r.hat()), p = ref1[0], closestWall = ref1[1];
        if (p !== null) {
          n = closestWall.a.clone().sub(closestWall.b).hat().rot90();
          brightness = Math.abs(p.dot(n) / (p.len2() * p.len()));
          this.ctx.fillStyle = "#FF0000";
          _h = Wall.h * r.len() / p.len() * this.height / this.scrHeight;
          this.ctx.fillRect(i - 1, 0, 1, this.height);
          console.log("drawn");
        }
        results.push(r.add(pxlLat));
      }
      return results;
    };

    Camera.prototype._getIntersection = function(r) {
      var __a, __b, _a, _b, _p, closestWall, j, len, p, ref, t, wall;
      closestWall = null;
      p = null;
      ref = this.walls;
      for (j = 0, len = ref.length; j < len; j++) {
        wall = ref[j];
        _a = wall.a.clone().sub(this.pos);
        _b = wall.b.clone().sub(this.pos);
        if (_a.dot(r) > _a.dot(_b.hat()) && _b.dot(r) > _b.dot(_a.hat())) {
          __a = _a.clone();
          __b = _b.clone();
          t = Math.abs((_b.cross(r)) / (_b.sub(_a).cross(r)));
          _p = __a.mult(t).add(__b.mult(1 - t));
          if (p !== null) {
            if (p.len2() > _p.len2()) {
              closestWall = wall;
              p = _p;
            }
          } else {
            p = _p;
            closestWall = wall;
          }
        }
      }
      return [p, closestWall];
    };

    return Camera;

  })();

  Player = (function() {
    function Player(position, theta, ctx, walls, width, height, pixWidth, ScrHeight, ScrWidth, ScrDist) {
      this.position = position;
      this.camera = new Camera(this.position, theta, ctx, walls, width, height, pixWidth, ScrHeight, ScrWidth, ScrDist);
    }

    Player.prototype.moveForward = function(r) {
      return this.position.add(this.e_r.clone().mult(r));
    };

    Player.prototype.turnLeft = function(dtheta) {
      return this.camera.theta += dtheta;
    };

    Player.prototype.moveLeft = function(r) {
      return this.position.add(this.e_r.clone().mult(r).rot90());
    };

    return Player;

  })();

}).call(this);
