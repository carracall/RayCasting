// Generated by CoffeeScript 1.10.0
(function() {
  var Unitvector, Vector, a,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Unitvector = (function() {
    function Unitvector(_x, _y) {
      this._x = _x;
      this._y = _y;
    }

    Unitvector.prototype.dot = function(vec) {
      return this._x * vec._x + this._y * vec._y;
    };

    Unitvector.prototype.cross = function(vec) {
      return this._x * vec._y - this._y * vec._x;
    };

    Unitvector.prototype.rot90 = function() {
      var x;
      x = this.x;
      this.x = -this.y;
      return this.y = x;
    };

    return Unitvector;

  })();

  Vector = (function(superClass) {
    extend(Vector, superClass);

    function Vector(x, y) {
      this._unit = null;
      this._length = null;
      this._length2 = null;
      Vector.__super__.constructor.call(this, x, y);
    }

    Vector.prototype.len2 = function() {
      if (this._length2 === null) {
        this._length2 = Math.pow(this._x, 2) + Math.pow(this._y, 2);
      }
      return this._length2;
    };

    Vector.prototype.len = function() {
      if (this._length === null) {
        this._length = Math.sqrt(this.len2());
      }
      return this._length;
    };

    Vector.prototype.hat = function() {
      if (!this._unit) {
        this._unit = new Unitvector(this._x / this.len(), this._y / this.len());
      }
      return this._unit;
    };

    Vector.prototype.set = function(_x, _y) {
      this._x = _x;
      this._y = _y;
      this._unit = null;
      this._length = null;
      this._length2 = null;
      return this;
    };

    Vector.prototype.clone = function() {
      return new Vector(this._x, this._y);
    };

    Vector.prototype.cloneAll = function() {
      var a;
      a = new Vector(this._x, this._y);
      a._unit = this._unit;
      a._length = this._length;
      a._length2 = this._length2;
      return a;
    };

    Vector.prototype.add = function(vec) {
      this.set(this._x + vec._x, this._y + vec._y);
      return this;
    };

    Vector.prototype.sub = function(vec) {
      this.set(this._x - vec._x, this._y - vec._y);
      return this;
    };

    Vector.prototype.mult = function(lambda) {
      this.set(this._x * lambda, this._y * lamda);
      return this;
    };

    return Vector;

  })(Unitvector);

  a = new Vector(1, 1);

  console.log(a, a.hat(), a.len(), a.dot(a.hat()));

}).call(this);
